# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml#

pr:
  branches:
    include:
      - "*"

pool:
  vmImage: "windows-latest"

steps:
  - powershell: |
      Get-ChildItem env: | Where-Object {$_.Name -like 'Build*' -or $_.Name -like 'System*'}
    displayName: Pipeline Variables

  - powershell: |
      Install-Module PSScriptAnalyzer -Scope Currentuser -SkipPublisherCheck -Force
      Install-Module Pester -Scope Currentuser -SkipPublisherCheck -Force
      $TestResults = Invoke-Pester -Path ./Tests -OutputFormat NUnitXml -OutputFile TestResults.xml -PassThru

      if ($TestResults.FailedCount -gt 0) {
          Throw "Failed '$($TestResults.FailedCount)' tests, build failed"
          Exit
      }

    displayName: "Pester"

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: "NUnit"
      testResultsFiles: "**/Test*.xml"

  - powershell: |
      $Module = find-module psgitchangelog

      [version]$Version = $Module.Version

      $NewVersion = "{0}.{1}.{2}" -f $version.Major,$version.Minor,($version.Build + 1)

      Write-Host New SemVer is: $NewVersion
      Write-Host "##vso[task.setvariable variable=Build.SemVerId;]$NewVersion"
      git tag $NewVersion
    displayName: New Semver

  - powershell: |
      Install-Module PSGitChangeLog -Scope CurrentUser -Force
      Import-Module PSGitChangeLog
      Get-GitHistory -OutputAs md | Set-Content Changelog.md -Encoding utf8
    displayName: Create Changelog
